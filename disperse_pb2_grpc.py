# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import disperse_pb2 as disperse__pb2


class DataDispersalStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.EncodeStore = channel.unary_unary(
                '/interfaceDL.DataDispersal/EncodeStore',
                request_serializer=disperse__pb2.EncodeStoreRequest.SerializeToString,
                response_deserializer=disperse__pb2.EncodeStoreReply.FromString,
                )
        self.DisperseStore = channel.unary_unary(
                '/interfaceDL.DataDispersal/DisperseStore',
                request_serializer=disperse__pb2.DisperseStoreRequest.SerializeToString,
                response_deserializer=disperse__pb2.DisperseStoreReply.FromString,
                )
        self.EncodeAndDisperseStore = channel.unary_unary(
                '/interfaceDL.DataDispersal/EncodeAndDisperseStore',
                request_serializer=disperse__pb2.EncodeStoreRequest.SerializeToString,
                response_deserializer=disperse__pb2.EncodeAndDisperseStoreReply.FromString,
                )
        self.StoreFrame = channel.unary_unary(
                '/interfaceDL.DataDispersal/StoreFrame',
                request_serializer=disperse__pb2.StoreFrameRequest.SerializeToString,
                response_deserializer=disperse__pb2.StoreFrameReply.FromString,
                )
        self.StoreFrames = channel.unary_unary(
                '/interfaceDL.DataDispersal/StoreFrames',
                request_serializer=disperse__pb2.StoreFramesRequest.SerializeToString,
                response_deserializer=disperse__pb2.StoreFrameReply.FromString,
                )
        self.RetrieveFrame = channel.unary_stream(
                '/interfaceDL.DataDispersal/RetrieveFrame',
                request_serializer=disperse__pb2.RetrieveFrameRequest.SerializeToString,
                response_deserializer=disperse__pb2.RetrieveFrameReply.FromString,
                )
        self.ChallengeCoding = channel.unary_unary(
                '/interfaceDL.DataDispersal/ChallengeCoding',
                request_serializer=disperse__pb2.CodingChallengeRequest.SerializeToString,
                response_deserializer=disperse__pb2.ChallengeReply.FromString,
                )
        self.ChallengePayment = channel.unary_unary(
                '/interfaceDL.DataDispersal/ChallengePayment',
                request_serializer=disperse__pb2.PaymentChallengeRequest.SerializeToString,
                response_deserializer=disperse__pb2.ChallengeReply.FromString,
                )


class DataDispersalServicer(object):
    """Missing associated documentation comment in .proto file."""

    def EncodeStore(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DisperseStore(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EncodeAndDisperseStore(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StoreFrame(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StoreFrames(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RetrieveFrame(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChallengeCoding(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChallengePayment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DataDispersalServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'EncodeStore': grpc.unary_unary_rpc_method_handler(
                    servicer.EncodeStore,
                    request_deserializer=disperse__pb2.EncodeStoreRequest.FromString,
                    response_serializer=disperse__pb2.EncodeStoreReply.SerializeToString,
            ),
            'DisperseStore': grpc.unary_unary_rpc_method_handler(
                    servicer.DisperseStore,
                    request_deserializer=disperse__pb2.DisperseStoreRequest.FromString,
                    response_serializer=disperse__pb2.DisperseStoreReply.SerializeToString,
            ),
            'EncodeAndDisperseStore': grpc.unary_unary_rpc_method_handler(
                    servicer.EncodeAndDisperseStore,
                    request_deserializer=disperse__pb2.EncodeStoreRequest.FromString,
                    response_serializer=disperse__pb2.EncodeAndDisperseStoreReply.SerializeToString,
            ),
            'StoreFrame': grpc.unary_unary_rpc_method_handler(
                    servicer.StoreFrame,
                    request_deserializer=disperse__pb2.StoreFrameRequest.FromString,
                    response_serializer=disperse__pb2.StoreFrameReply.SerializeToString,
            ),
            'StoreFrames': grpc.unary_unary_rpc_method_handler(
                    servicer.StoreFrames,
                    request_deserializer=disperse__pb2.StoreFramesRequest.FromString,
                    response_serializer=disperse__pb2.StoreFrameReply.SerializeToString,
            ),
            'RetrieveFrame': grpc.unary_stream_rpc_method_handler(
                    servicer.RetrieveFrame,
                    request_deserializer=disperse__pb2.RetrieveFrameRequest.FromString,
                    response_serializer=disperse__pb2.RetrieveFrameReply.SerializeToString,
            ),
            'ChallengeCoding': grpc.unary_unary_rpc_method_handler(
                    servicer.ChallengeCoding,
                    request_deserializer=disperse__pb2.CodingChallengeRequest.FromString,
                    response_serializer=disperse__pb2.ChallengeReply.SerializeToString,
            ),
            'ChallengePayment': grpc.unary_unary_rpc_method_handler(
                    servicer.ChallengePayment,
                    request_deserializer=disperse__pb2.PaymentChallengeRequest.FromString,
                    response_serializer=disperse__pb2.ChallengeReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'interfaceDL.DataDispersal', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DataDispersal(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def EncodeStore(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/interfaceDL.DataDispersal/EncodeStore',
            disperse__pb2.EncodeStoreRequest.SerializeToString,
            disperse__pb2.EncodeStoreReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DisperseStore(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/interfaceDL.DataDispersal/DisperseStore',
            disperse__pb2.DisperseStoreRequest.SerializeToString,
            disperse__pb2.DisperseStoreReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EncodeAndDisperseStore(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/interfaceDL.DataDispersal/EncodeAndDisperseStore',
            disperse__pb2.EncodeStoreRequest.SerializeToString,
            disperse__pb2.EncodeAndDisperseStoreReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StoreFrame(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/interfaceDL.DataDispersal/StoreFrame',
            disperse__pb2.StoreFrameRequest.SerializeToString,
            disperse__pb2.StoreFrameReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StoreFrames(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/interfaceDL.DataDispersal/StoreFrames',
            disperse__pb2.StoreFramesRequest.SerializeToString,
            disperse__pb2.StoreFrameReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RetrieveFrame(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/interfaceDL.DataDispersal/RetrieveFrame',
            disperse__pb2.RetrieveFrameRequest.SerializeToString,
            disperse__pb2.RetrieveFrameReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ChallengeCoding(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/interfaceDL.DataDispersal/ChallengeCoding',
            disperse__pb2.CodingChallengeRequest.SerializeToString,
            disperse__pb2.ChallengeReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ChallengePayment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/interfaceDL.DataDispersal/ChallengePayment',
            disperse__pb2.PaymentChallengeRequest.SerializeToString,
            disperse__pb2.ChallengeReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
